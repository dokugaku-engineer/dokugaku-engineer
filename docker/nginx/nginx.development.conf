# 実行ユーザを指定
user nginx;

# 実行プロセス数を指定
worker_processes auto;

# 実行ファイルの最大数を指定
worker_rlimit_nofile 1024;

# エラーログの出力先とレベルを指定
error_log /var/log/nginx/error.log warn;

# プロセスIDを保存するファイルを指定
pid /var/run/nginx.pid;

# イベント処理に関するモジュールの設定
events {
    # 1ワーカーの接続数
    worker_connections 1024;

    # 複数のリクエストを同時に受け付けるか
    multi_accept on;

    # 複数アクセスをさばくため、I/O多重化に使うシステムコールを指定
    ## epollは計算量が少なく、また監視対象のファイルディスクリプタの数が無制限
    use epoll;
}

# httpに関するモジュールの設定
http {
    # MIMEタイプの指定
    ## nginxがデフォルトで用意するMIMEタイプと拡張子のマッピングファイル
    include /etc/nginx/mime.types;
    ## マッピングにない拡張子のdefault
    ### application/octet-streamはファイルの種類は気にするなの意味
    default_type application/octet-stream;

    # ログのフォーマットに名前を付ける
    log_format log_ltsv 'domain:$host\t'
                      'host:$remote_addr\t'
                      'user:$remote_user\t'
                      'time:$time_local\t'
                      'method:$request_method\t'
                      'path:$request_uri\t'
                      'status:$status\t'
                      'size:$body_bytes_sent\t'
                      'referer:$http_referer\t'
                      'agent:$http_user_agent\t'
                      'x_forwarded_for:$http_x_forwarded_for\t'
                      'set_cookie:$sent_http_set_cookie\t'
                      'upstream_addr:$upstream_addr\t'
                      'upstream_cache_status:$upstream_cache_status\t'
                      'upstream_response_time:$upstream_response_time';

    # アクセスログの出力先とフォーマットを指定
    access_log /var/log/nginx/access.log log_ltsv;

    # カーネルのsendfileを使用。ハードディスクio処理とsocket-io処理のバランスを取る
    sendfile on;

    # レスポンスヘッダとファイルの内容をまとめて送る
    tcp_nopush on;

    # TCPパケットの容量がいっぱいになるのを待たずに送る
    tcp_nodelay on;

    # エラー画面の時にNginxのバージョンを表示しない
    server_tokens off;

    # HTTPの接続時間
    keepalive_timeout 60;

    # クライアントリクエストボディの最大サイズ
    client_max_body_size 15m;

    # クライアントリクエストボディの読み取りの最大時間
    client_body_timeout 60;

    # クライアントリクエストボディの読み取りのバッファサイズ
    client_body_buffer_size 16K;

    # クライアントリクエストヘッダーの読み取りの最大時間
    client_header_timeout 60;

    # クライアントのリクエストヘッダーの読み取りのバッファサイズ
    client_header_buffer_size 32k;

    # 大きなクライアントリクエストヘッダを読み込むのに使われるバッファの数とサイズの最大値
    large_client_header_buffers 4 32k;

    # クライアントに応答する転送タイムアウト
    send_timeout 10;

    # 非アクティブクライアントのコネクションをクローズする
    reset_timedout_connection on;

    # タイプのハッシュテーブルの最大サイズ
    types_hash_max_size 2048;

    # 保持に使うキャッシュを設定
    ## max：キャッシュ内の要素の最大数を設定
    ## inactive：指定の期間アクセスされていないエレメントがキャッシュから削除される期間
    open_file_cache max=1000 inactive=20s;

    # ファイルルックアップエラーのキャッシュを有効
    open_file_cache_valid 30s;

    # open_file_cacheの非アクティブファイルの最小ファイル数
    open_file_cache_min_uses 4;

    # ファイルのエラー情報もキャッシュする
    open_file_cache_errors on;

    # 仮想サーバーの設定
    server {
        # ポートを設定
        ## default_serverを指定すると想定外のアクセスが来てもこのserverブロックで処理する
        listen 80 default_server;

        # 仮想サーバーの名前
        server_name localhost 127.0.0.1;

        # エラーログの出力先
        error_log /var/log/nginx/error.log;

        # HTTPの持続的な接続時間
        keepalive_timeout 120;

        charset utf-8;

        # レスポンスヘッダーに追加
        ## ブラウザーに HTTP の代わりに HTTPS を用いて通信を行うよう指示
        add_header Strict-Transport-Security "max-age=15768000" always;
        ## ユーザーエージェントごとにキャッシュを分ける
        add_header Vary "User-Agent";
        ## クリックジャッキング対策
        add_header X-Frame-Options "SAMEORIGIN";
        ## XSS対策
        add_header X-XSS-Protection "1; mode=block";
        ## IEで発生するコンテンツタイプSniffing対策
        add_header X-Content-Type-Options "nosniff";

        # gzip圧縮する
        gzip on;

        # gzip圧縮する対象のファイルを指定する
        gzip_types application/json;

        # IE6では圧縮されたファイルの展開に失敗することがあるので、その場合は圧縮しない
        gzip_disable "MSIE [1-6]\.";

        # Vary: Accept-Encoding をレスポンスヘッダに付加する
        gzip_vary on;

        # リクエストのルートディレクトリ
        root /var/www/public/;

        # インデックスファイルの指定
        index index.html index.htm index.php;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        location ~ \.php$ {
            # ファイルが見つからなければ404を返す
            try_files $uri =404;

            # $fastcgi_script_name, $fastcgi_path_info 変数に入れる値を正規表現で指定
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            # FastCGIサーバーのアドレスを指定
            fastcgi_pass unix:/var/run/php7-fpm.sock;

            # インデックスのファイル名を指定
            fastcgi_index index.php;

            # FastCGIの設定ファイルを読み込む
            include fastcgi_params;

            # FastCGIの設定を追加
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # エラー時に表示するURIを指定
        error_page 404 /404.html;
        error_page 500 502 503 504 /500.html;
    }
}
